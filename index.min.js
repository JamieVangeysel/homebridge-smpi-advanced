var T=Object.create;var d=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var P=(s,e)=>{for(var t in e)d(s,t,{get:e[t],enumerable:!0})},v=(s,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of A(e))!N.call(s,r)&&r!==t&&d(s,r,{get:()=>e[r],enumerable:!(i=D(e,r))||i.enumerable});return s};var S=(s,e,t)=>(t=s!=null?T(w(s)):{},v(e||!s||!s.__esModule?d(t,"default",{value:s,enumerable:!0}):t,s)),G=s=>v(d({},"__esModule",{value:!0}),s);var _={};P(_,{default:()=>x});module.exports=G(_);var o="SMPI-Advanced",c="homebridge-smpi-advanced";var y=S(require("cross-fetch")),p=class{constructor(e,t,i){this.platform=e,this.accessory=t,this.config=i,this.temperature=null,this.humidity=null,e.log.warn("Setting op NeoSensorAccessory "+i.name),this.accessory.getService(this.platform.Service.AccessoryInformation).setCharacteristic(this.platform.api.hap.Characteristic.Manufacturer,"Simplintho").setCharacteristic(this.platform.api.hap.Characteristic.Model,"Simplintho Neo THP10").setCharacteristic(this.platform.api.hap.Characteristic.FirmwareRevision,"0.0.0").setCharacteristic(this.platform.api.hap.Characteristic.SerialNumber,i.uuid.substring(0,12)),this.serviceTemperature=this.accessory.getService(this.platform.Service.TemperatureSensor)||this.accessory.addService(this.platform.Service.TemperatureSensor),this.serviceHumidity=this.accessory.getService(this.platform.Service.HumiditySensor)||this.accessory.addService(this.platform.Service.HumiditySensor),this.serviceTemperature.setCharacteristic(this.platform.api.hap.Characteristic.Name,i.name),this.serviceHumidity.setCharacteristic(this.platform.api.hap.Characteristic.Name,i.name),this.log=this.platform.log,this.serviceTemperature.getCharacteristic(this.platform.api.hap.Characteristic.CurrentTemperature).on("get",this.handleCurrentTemperatureGet.bind(this)),this.serviceHumidity.getCharacteristic(this.platform.api.hap.Characteristic.CurrentRelativeHumidity).on("get",this.handleCurrentRelativeHumidityGet.bind(this)),this.updateStatus(),setInterval(()=>{this.updateStatus()},10*1e3)}updateStatus(){try{(0,y.default)(this.fetchUrl).then(async e=>{if(e.status===200){let t=await e.json();if(t.status==="success"&&t.data.length>0){this.temperature=t.data[0].temperature,this.humidity=t.data[0].humidity??0,this.serviceTemperature.updateCharacteristic(this.platform.api.hap.Characteristic.CurrentTemperature,this.heatIndex??this.temperature),this.serviceHumidity.updateCharacteristic(this.platform.api.hap.Characteristic.CurrentRelativeHumidity,this.humidity*100);return}this.platform.log.error("Error updating temperature")}else this.platform.log.error(`Could not retrieve values from api; [${e.status}]'${this.fetchUrl}'`)})}catch{this.platform.log.error(`Could not get data from '${this.fetchUrl}'.`)}}handleCurrentTemperatureGet(e){this.platform.log.debug("Triggered GET CurrentTemperature");let t=this.heatIndex??this.temperature??0;e(null,t)}handleCurrentRelativeHumidityGet(e){this.platform.log.debug("Triggered GET CurrentRelativeHumidity");let t=this.humidity??0;e(null,t*100)}get heatIndex(){let e;return this.temperature&&this.humidity&&(e=this.calculateHeatIndex(this.temperature,this.humidity)),e}calculateHeatIndex(e,t){let i=e*1.8+32,r=t,a=0,l=.5*(i+61+(i-68)*1.2+r*.094);return(l+i)/2>=80&&(l=-42.379+2.04901523*i+10.14333127*r-.22475541*i*r-.00683783*i*i-.05481717*r*r+.00122874*i*i*r+85282e-8*i*r*r-199e-8*i*i*r*r,i>=80&&i<=112&&r<=13?a=-1*((13-r)/4*Math.sqrt((17-Math.abs(i-95))/17)):i>=80&&i<=87&&r>=85&&(a=(r-85)/10*((87-i)/5))),(l+a-32)/1.8}get fetchUrl(){return`https://api.jamievangeysel.be/v1/neo/devices/${this.config.uuid}/data`}};var b=S(require("cross-fetch")),I=50.89328,H=5.318499,g=10*1e3,h=900*1e3,C=2700*1e3,u=class{constructor(e,t){this.currentTime=0;this.isSunrise=void 0;this.isSunset=void 0;this.isNoon=void 0;this.isGoldenHour=void 0;this.isDawn=void 0;this.isDusk=void 0;this.api_values=void 0;this.exampleStates={On:!0,Brightness:100};this.platform=e,this.accessory=t,e.log.info("Setting op SolarAccessory"),this.accessory.getService(this.platform.Service.AccessoryInformation).setCharacteristic(this.platform.api.hap.Characteristic.Manufacturer,"SunriseSunset.io").setCharacteristic(this.platform.api.hap.Characteristic.Model,"Solar information").setCharacteristic(this.platform.api.hap.Characteristic.FirmwareRevision,"1.0.0").setCharacteristic(this.platform.api.hap.Characteristic.SerialNumber,"SERIAL NUMBER"),this.service=this.accessory.getService(this.platform.Service.Lightbulb)||this.accessory.addService(this.platform.Service.Lightbulb),this.service.setCharacteristic(this.platform.api.hap.Characteristic.Name,"SunriseSunset"),this.service.getCharacteristic(this.platform.api.hap.Characteristic.On).onSet(this.setOn.bind(this)).onGet(this.getOn.bind(this)),this.serviceSunrise=this.accessory.getService("Sunrise")||this.accessory.addService(this.platform.Service.MotionSensor,"Sunrise","Sunrise-motion"),this.serviceSunset=this.accessory.getService("Sunset")||this.accessory.addService(this.platform.Service.MotionSensor,"Sunset","Sunset-motion"),this.serviceNoon=this.accessory.getService("Noon")||this.accessory.addService(this.platform.Service.MotionSensor,"Noon","Noon-motion"),this.serviceGoldenHour=this.accessory.getService("GoldenHour")||this.accessory.addService(this.platform.Service.MotionSensor,"GoldenHour","GoldenHour-motion"),this.serviceDawn=this.accessory.getService("Dawn")||this.accessory.addService(this.platform.Service.MotionSensor,"Dawn","Dawn-motion"),this.serviceDusk=this.accessory.getService("Dusk")||this.accessory.addService(this.platform.Service.MotionSensor,"Dusk","Dusk-motion"),this.serviceSunrise.setCharacteristic(this.platform.api.hap.Characteristic.Name,"Sunrise").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"Sunrise").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(r=>this.isSunrise?1:0),this.serviceSunset.setCharacteristic(this.platform.api.hap.Characteristic.Name,"Sunset").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"Sunset").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(r=>this.isSunset?1:0),this.serviceNoon.setCharacteristic(this.platform.api.hap.Characteristic.Name,"Noon").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"Noon").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(r=>this.isNoon?1:0),this.serviceGoldenHour.setCharacteristic(this.platform.api.hap.Characteristic.Name,"GoldenHour").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"GoldenHour").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(r=>this.isGoldenHour?1:0),this.serviceDawn.setCharacteristic(this.platform.api.hap.Characteristic.Name,"Dawn").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"Dawn").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(r=>this.isDawn?1:0),this.serviceDusk.setCharacteristic(this.platform.api.hap.Characteristic.Name,"Dusk").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"Dusk").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(r=>this.isDusk?1:0),this.loadApiValues(),setInterval(()=>{this.update()},3*1e3)}loadApiValues(){if(this.exampleStates.On){let e=async i=>{if(i.status===200){this.platform.log.info("loadApiValues() -- Received status OK from api.sunrisesunset.io");let r=await i.json();r.results&&(this.platform.log.info("loadApiValues() -- Response",r.results),this.api_values=r.results),this.update()}},t=i=>{this.platform.log.error("loadApiValues() -- error",i)};(0,b.default)(this.apiUrl).then(e).catch(t)}}async setOn(e){this.exampleStates.On=e,this.platform.log.debug("Set Characteristic On ->",e)}async getOn(){let e=this.exampleStates.On;return this.platform.log.debug("Get Characteristic On ->",e),e}update(){let e=performance.now();this.platform.log.debug("SolarAccessory.update() -- start"),this.currentTime=new Date().getTime(),this.exampleStates.On?(this.platform.log.debug("SolarAccessory.update() -- this.exampleStates.On: true"),this.api_values?(this.platform.log.debug("SolarAccessory.update() -- api_values is defined",this.api_values.dawn),this.api_values.date!==new Date().toISOString().substring(0,10)&&(this.platform.log.info("Date has changed, request new info from api!"),this.loadApiValues()),this.platform.log.debug("SolarAccessory.checkDetection() -- start"),this.checkDetection(this.isSunrise,this.sunriseDetected),this.checkDetection(this.isSunset,this.sunsetDetected),this.checkDetection(this.isNoon,this.noonDetected),this.checkDetection(this.isGoldenHour,this.goldenHourDetected),this.checkDetection(this.isDawn,this.dawnDetected),this.checkDetection(this.isDusk,this.duskDetected),this.platform.log.debug("SolarAccessory.checkDetection() -- end")):this.platform.log.error("SolarAccessory.update() -- api_values is undefined!")):(this.platform.log.debug("SolarAccessory.update() -- this.exampleStates.On: false"),this.platform.log.info("SolarAccessory.update() -- disabled")),this.platform.log.debug("SolarAccessory.update() -- end",performance.now()-e)}checkDetection(e,t){return e===void 0&&(e=t),e!==t&&(this.platform.log.info("currentState must change; targetState: "+t),this.serviceSunrise.setCharacteristic(this.platform.api.hap.Characteristic.MotionDetected,t?1:0),e=t),e}get sunriseDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.sunrise}.000`).getTime();e=this.currentTime>t-g&&this.currentTime<t+g,this.platform.log.debug(`sunriseDetected() -- ${e}`)}return e}get sunsetDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.sunset}.000`).getTime();e=this.currentTime>t-g&&this.currentTime<t+g,this.platform.log.debug(`sunsetDetected() -- ${e}`)}return e}get noonDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.solar_noon}.000`).getTime();e=this.currentTime>t-C&&this.currentTime<t+C,this.platform.log.debug(`noonDetected() -- ${e}`)}return e}get goldenHourDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.golden_hour}.000`).getTime();e=this.currentTime>t-h&&this.currentTime<t+h,this.platform.log.debug(`goldenHourDetected() -- ${e}`)}return e}get dawnDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.dawn}.000`).getTime();e=this.currentTime>t-h&&this.currentTime<t+h,this.platform.log.debug(`dawnDetected() --  ${e}`)}return e}get duskDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.dusk}.000`).getTime();e=this.currentTime>t-h&&this.currentTime<t+h,this.platform.log.debug(`duskDetected() --  ${e}`)}return e}get apiUrl(){return`https://api.sunrisesunset.io/json?lat=${I}&lng=${H}&timezone=CET&time_format=24`}};var n=S(require("cross-fetch")),m=class{constructor(e,t,i){this.platform=e,this.accessory=t,this.config=i,this.Characteristic=this.platform.api.hap.Characteristic,this.accessory.getService(this.platform.Service.AccessoryInformation).setCharacteristic(this.Characteristic.Manufacturer,"Jamie Vangeysel").setCharacteristic(this.Characteristic.Model,"Thermostat").setCharacteristic(this.Characteristic.FirmwareRevision,"1.0").setCharacteristic(this.Characteristic.SerialNumber,"Unknown"),this.service=this.accessory.getService(this.platform.Service.Thermostat)||this.accessory.addService(this.platform.Service.Thermostat),this.service.setCharacteristic(this.Characteristic.Name,i.name),this.service.setCharacteristic(this.Characteristic.ConfiguredName,i.name),this.service.getCharacteristic(this.Characteristic.CurrentHeatingCoolingState).on("get",this.currentHeatingCoolingStateGet.bind(this)),this.service.getCharacteristic(this.Characteristic.TargetHeatingCoolingState).on("get",this.targetHeatingCoolingStateGet.bind(this)).on("set",this.targetHeatingCoolingStateSet.bind(this)),this.service.getCharacteristic(this.Characteristic.CurrentTemperature).on("get",this.currentTemperatureGet.bind(this)),this.service.getCharacteristic(this.Characteristic.TargetTemperature).on("get",this.targetTemperatureGet.bind(this)).on("set",this.targetTemperatureSet.bind(this)).setProps({minValue:16,maxValue:26,minStep:1}),this.service.getCharacteristic(this.Characteristic.TemperatureDisplayUnits).on("get",this.temperatureDisplayUnitsGet.bind(this)).on("set",this.temperatureDisplayUnitsSet.bind(this))}async currentHeatingCoolingStateGet(e){this.platform.log.debug("Triggered GET CurrentHeatingCoolingState");try{let i=await(await(0,n.default)(this.urls.currentState())).json();e(null,i.value)}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.currentState()}'.`),e(new Error("Error while getting data from thermostat"))}}async targetHeatingCoolingStateGet(e){this.platform.log.debug("Triggered GET TargetHeatingCoolingState");try{let i=await(await(0,n.default)(this.urls.targetState())).json();e(null,i.value)}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.targetState()}'.`),e(new Error("Error while getting data from thermostat"))}}async targetHeatingCoolingStateSet(e){this.platform.log.debug("Triggered SET TargetHeatingCoolingState:",e),await(0,n.default)(this.urls.targetState(),{method:"post",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({value:e})})}async currentTemperatureGet(e){this.platform.log.debug("Triggered GET CurrentTemperature");try{let i=await(await(0,n.default)(this.urls.currentTemperature())).json();e(null,i.value)}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.currentTemperature()}'.`),e(new Error("Error while getting data from thermostat"))}}async targetTemperatureGet(e){this.platform.log.debug("Triggered GET TargetTemperature");try{let i=await(await(0,n.default)(this.urls.targetTemperature())).json();e(null,i.value)}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.targetTemperature()}'.`),e(new Error("Error while getting data from thermostat"))}}async targetTemperatureSet(e){this.platform.log.debug("Triggered SET TargetTemperature:",e),await(0,n.default)(this.urls.targetTemperature(),{method:"post",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({value:e})})}temperatureDisplayUnitsGet(e){this.platform.log.debug("Triggered GET TemperatureDisplayUnits"),e(null,0)}temperatureDisplayUnitsSet(e){this.platform.log.debug("Triggered SET TemperatureDisplayUnits:",e)}currentRelativeHumidityGet(){return this.platform.log.debug("Triggered GET CurrentRelativeHumidity:"),0}get urls(){let e=`http://${this.config.host}:${this.config.port??8080}/${this.config.instance??"default"}`;return{currentTemperature:()=>`${e}/current-temperature`,targetTemperature:()=>`${e}/target-temperature`,currentState:()=>`${e}/current-state`,targetState:()=>`${e}/target-state`}}};var f=class{constructor(e,t,i){this.log=e,this.config=t,this.api=i,this.Service=this.api.hap.Service,this.Characteristic=this.api.hap.Characteristic,this.accessories=[],this.foundAccessoires=[],this.log.debug("Finished initializing platform:",this.config.name),this.api.on("didFinishLaunching",()=>{this.log.debug("Executed didFinishLaunching callback"),this.discoverDevices()})}configureAccessory(e){this.log.info("Loading accessory from cache:",e.displayName),this.accessories.push(e)}discoverDevices(){let e=this.config;e.neoSensors.forEach(this.setupNeoSensor.bind(this)),e.thermostats.forEach(this.setupThermostat.bind(this)),this.setupNeoSunriseSunset();for(let t of this.accessories)this.foundAccessoires.some(function(r){return r===t.UUID})||(this.log.warn(`Accessory '${t.displayName}' war removed due to missing link in config!`),this.api.unregisterPlatformAccessories(c,o,[t]))}setupNeoSensor(e){let t=this.api.hap.uuid.generate(e.uuid);this.foundAccessoires.push(t);let i=a=>a.UUID===t,r=this.accessories.find(i);if(r)if(e){this.log.info("Restoring existing accessory from cache:",r.displayName);let a=new p(this,r,e)}else e||(this.api.unregisterPlatformAccessories(c,o,[r]),this.log.info("Removing existing accessory from cache:",r.displayName));else{this.log.info("Adding new accessory:",e.name);let a=new this.api.platformAccessory(e.name,t);a.context.device=e;let l=new p(this,a,e);this.api.registerPlatformAccessories(c,o,[a])}}setupThermostat(e){let t=this.api.hap.uuid.generate(`${e.host}-${e.instance??"default"}`);this.foundAccessoires.push(t);let i=a=>a.UUID===t,r=this.accessories.find(i);if(r)if(e){this.log.info("Restoring existing accessory from cache:",r.displayName);let a=new m(this,r,e)}else e||(this.api.unregisterPlatformAccessories(c,o,[r]),this.log.info("Removing existing accessory from cache:",r.displayName));else{this.log.info("Adding new accessory:",e.name);let a=new this.api.platformAccessory(e.name,t);a.context.device=e;let l=new m(this,a,e);this.api.registerPlatformAccessories(c,o,[a])}}setupNeoSunriseSunset(){let e=this.api.hap.uuid.generate("SunriseSunset");this.foundAccessoires.push(e);let t=r=>r.UUID===e,i=this.accessories.find(t);if(i){this.log.info("Restoring existing accessory from cache:",i.displayName);let r=new u(this,i)}else{let r=new this.api.platformAccessory("SunriseSunset",e),a=new u(this,r);this.api.registerPlatformAccessories(c,o,[r])}}};var x=s=>{s.registerPlatform(o,f)};
