var T=Object.create;var g=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,G=Object.prototype.hasOwnProperty;var N=(a,e)=>{for(var t in e)g(a,t,{get:e[t],enumerable:!0})},S=(a,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of A(e))!G.call(a,i)&&i!==t&&g(a,i,{get:()=>e[i],enumerable:!(r=w(e,i))||r.enumerable});return a};var v=(a,e,t)=>(t=a!=null?T(D(a)):{},S(e||!a||!a.__esModule?g(t,"default",{value:a,enumerable:!0}):t,a)),E=a=>S(g({},"__esModule",{value:!0}),a);var V={};N(V,{default:()=>P});module.exports=E(V);var n="SMPI-Advanced",h="homebridge-smpi-advanced";var y=v(require("cross-fetch")),u=class{constructor(e,t,r){this.platform=e,this.accessory=t,this.config=r,this.temperature=null,this.humidity=null,e.log.warn("Setting op NeoSensorAccessory "+r.name),this.accessory.getService(this.platform.Service.AccessoryInformation).setCharacteristic(this.platform.api.hap.Characteristic.Manufacturer,"Simplintho").setCharacteristic(this.platform.api.hap.Characteristic.Model,"Simplintho Neo THP10").setCharacteristic(this.platform.api.hap.Characteristic.FirmwareRevision,"0.0.0").setCharacteristic(this.platform.api.hap.Characteristic.SerialNumber,r.uuid.substring(0,12)),this.serviceTemperature=this.accessory.getService(this.platform.Service.TemperatureSensor)||this.accessory.addService(this.platform.Service.TemperatureSensor),this.serviceHumidity=this.accessory.getService(this.platform.Service.HumiditySensor)||this.accessory.addService(this.platform.Service.HumiditySensor),this.serviceTemperature.setCharacteristic(this.platform.api.hap.Characteristic.Name,r.name),this.serviceHumidity.setCharacteristic(this.platform.api.hap.Characteristic.Name,r.name),this.log=this.platform.log,this.serviceTemperature.getCharacteristic(this.platform.api.hap.Characteristic.CurrentTemperature).on("get",this.handleCurrentTemperatureGet.bind(this)),this.serviceHumidity.getCharacteristic(this.platform.api.hap.Characteristic.CurrentRelativeHumidity).on("get",this.handleCurrentRelativeHumidityGet.bind(this)),this.updateStatus(),setInterval(()=>{this.updateStatus()},10*1e3)}updateStatus(){try{(0,y.default)(this.fetchUrl).then(async e=>{if(e.status===200){let t=await e.json();if(t.status==="success"&&t.data.length>0){this.temperature=t.data[0].temperature,this.humidity=t.data[0].humidity??0,this.serviceTemperature.updateCharacteristic(this.platform.api.hap.Characteristic.CurrentTemperature,this.heatIndex??this.temperature),this.serviceHumidity.updateCharacteristic(this.platform.api.hap.Characteristic.CurrentRelativeHumidity,this.humidity*100);return}this.platform.log.error("Error updating temperature")}else this.platform.log.error(`Could not retrieve values from api; [${e.status}]'${this.fetchUrl}'`)})}catch{this.platform.log.error(`Could not get data from '${this.fetchUrl}'.`)}}handleCurrentTemperatureGet(e){this.platform.log.debug("Triggered GET CurrentTemperature");let t=this.heatIndex??this.temperature??0;e(null,t)}handleCurrentRelativeHumidityGet(e){this.platform.log.debug("Triggered GET CurrentRelativeHumidity");let t=this.humidity??0;e(null,t*100)}get heatIndex(){let e;return this.temperature&&this.humidity&&(e=this.calculateHeatIndex(this.temperature,this.humidity)),e}calculateHeatIndex(e,t){let r=e*1.8+32,i=t,s=0,c=.5*(r+61+(r-68)*1.2+i*.094);return(c+r)/2>=80&&(c=-42.379+2.04901523*r+10.14333127*i-.22475541*r*i-.00683783*r*r-.05481717*i*i+.00122874*r*r*i+85282e-8*r*i*i-199e-8*r*r*i*i,r>=80&&r<=112&&i<=13?s=-1*((13-i)/4*Math.sqrt((17-Math.abs(r-95))/17)):r>=80&&r<=87&&i>=85&&(s=(i-85)/10*((87-r)/5))),(c+s-32)/1.8}get fetchUrl(){return`https://api.jamievangeysel.be/v1/neo/devices/${this.config.uuid}/data`}};var b=v(require("cross-fetch")),H=50.89328,I=5.318499,d=10*1e3,l=900*1e3,C=2700*1e3,m=class{constructor(e,t){this.currentTime=0;this.isSunrise=void 0;this.isSunset=void 0;this.isNoon=void 0;this.isGoldenHour=void 0;this.isDawn=void 0;this.isDusk=void 0;this.api_values=void 0;this.exampleStates={On:!0,Brightness:100};this.platform=e,this.accessory=t,e.log.info("Setting op SolarAccessory"),this.accessory.getService(this.platform.Service.AccessoryInformation).setCharacteristic(this.platform.api.hap.Characteristic.Manufacturer,"SunriseSunset.io").setCharacteristic(this.platform.api.hap.Characteristic.Model,"Solar information").setCharacteristic(this.platform.api.hap.Characteristic.FirmwareRevision,"1.0.0").setCharacteristic(this.platform.api.hap.Characteristic.SerialNumber,"SERIAL NUMBER"),this.service=this.accessory.getService(this.platform.Service.Lightbulb)||this.accessory.addService(this.platform.Service.Lightbulb),this.service.setCharacteristic(this.platform.api.hap.Characteristic.Name,"SunriseSunset"),this.service.getCharacteristic(this.platform.api.hap.Characteristic.On).onSet(this.setOn.bind(this)).onGet(this.getOn.bind(this)),this.serviceSunrise=this.accessory.getService("Sunrise")||this.accessory.addService(this.platform.Service.MotionSensor,"Sunrise","Sunrise-motion"),this.serviceSunset=this.accessory.getService("Sunset")||this.accessory.addService(this.platform.Service.MotionSensor,"Sunset","Sunset-motion"),this.serviceNoon=this.accessory.getService("Noon")||this.accessory.addService(this.platform.Service.MotionSensor,"Noon","Noon-motion"),this.serviceGoldenHour=this.accessory.getService("GoldenHour")||this.accessory.addService(this.platform.Service.MotionSensor,"GoldenHour","GoldenHour-motion"),this.serviceDawn=this.accessory.getService("Dawn")||this.accessory.addService(this.platform.Service.MotionSensor,"Dawn","Dawn-motion"),this.serviceDusk=this.accessory.getService("Dusk")||this.accessory.addService(this.platform.Service.MotionSensor,"Dusk","Dusk-motion"),this.serviceSunrise.setCharacteristic(this.platform.api.hap.Characteristic.Name,"Sunrise").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"Sunrise").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(i=>this.isSunrise?1:0),this.serviceSunset.setCharacteristic(this.platform.api.hap.Characteristic.Name,"Sunset").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"Sunset").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(i=>this.isSunset?1:0),this.serviceNoon.setCharacteristic(this.platform.api.hap.Characteristic.Name,"Noon").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"Noon").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(i=>this.isNoon?1:0),this.serviceGoldenHour.setCharacteristic(this.platform.api.hap.Characteristic.Name,"GoldenHour").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"GoldenHour").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(i=>this.isGoldenHour?1:0),this.serviceDawn.setCharacteristic(this.platform.api.hap.Characteristic.Name,"Dawn").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"Dawn").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(i=>this.isDawn?1:0),this.serviceDusk.setCharacteristic(this.platform.api.hap.Characteristic.Name,"Dusk").setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,"Dusk").getCharacteristic(this.platform.api.hap.Characteristic.MotionDetected).onGet(i=>this.isDusk?1:0),this.loadApiValues(),setInterval(()=>{this.update()},3*1e3)}loadApiValues(){if(this.exampleStates.On){let e=async r=>{if(r.status===200){this.platform.log.info("loadApiValues() -- Received status OK from api.sunrisesunset.io");let i=await r.json();i.results&&(this.platform.log.info("loadApiValues() -- Response",i.results),this.api_values=i.results),this.update()}},t=r=>{this.platform.log.error("loadApiValues() -- error",r)};(0,b.default)(this.apiUrl).then(e).catch(t)}}async setOn(e){this.exampleStates.On=e,this.platform.log.debug("Set Characteristic On ->",e)}async getOn(){let e=this.exampleStates.On;return this.platform.log.debug("Get Characteristic On ->",e),e}update(){let e=performance.now();this.platform.log.debug("SolarAccessory.update() -- start"),this.currentTime=new Date().getTime(),this.exampleStates.On?(this.platform.log.debug("SolarAccessory.update() -- this.exampleStates.On: true"),this.api_values?(this.platform.log.debug("SolarAccessory.update() -- api_values is defined",this.api_values.dawn),this.api_values.date!==new Date().toISOString().substring(0,10)&&(this.platform.log.info("Date has changed, request new info from api!"),this.loadApiValues()),this.platform.log.debug("SolarAccessory.checkDetection() -- start"),this.checkDetection(this.serviceSunrise,this.isSunrise,this.sunriseDetected),this.checkDetection(this.serviceSunset,this.isSunset,this.sunsetDetected),this.checkDetection(this.serviceNoon,this.isNoon,this.noonDetected),this.checkDetection(this.serviceGoldenHour,this.isGoldenHour,this.goldenHourDetected),this.checkDetection(this.serviceDawn,this.isDawn,this.dawnDetected),this.checkDetection(this.serviceDusk,this.isDusk,this.duskDetected),this.platform.log.debug("SolarAccessory.checkDetection() -- end")):this.platform.log.error("SolarAccessory.update() -- api_values is undefined!")):(this.platform.log.debug("SolarAccessory.update() -- this.exampleStates.On: false"),this.platform.log.info("SolarAccessory.update() -- disabled")),this.platform.log.debug("SolarAccessory.update() -- end",performance.now()-e)}checkDetection(e,t,r){return t===void 0&&(t=r),t!==r&&(this.platform.log.info("currentState must change; targetState: "+r),e.setCharacteristic(this.platform.api.hap.Characteristic.MotionDetected,r?1:0),t=r),t}get sunriseDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.sunrise}.000`).getTime();e=this.currentTime>t-d&&this.currentTime<t+d,this.platform.log.debug(`sunriseDetected() -- ${e}`)}return e}get sunsetDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.sunset}.000`).getTime();e=this.currentTime>t-d&&this.currentTime<t+d,this.platform.log.debug(`sunsetDetected() -- ${e}`)}return e}get noonDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.solar_noon}.000`).getTime();e=this.currentTime>t-C&&this.currentTime<t+C,this.platform.log.debug(`noonDetected() -- ${e}`)}return e}get goldenHourDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.golden_hour}.000`).getTime();e=this.currentTime>t-l&&this.currentTime<t+l,this.platform.log.debug(`goldenHourDetected() -- ${e}`)}return e}get dawnDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.dawn}.000`).getTime();e=this.currentTime>t-l&&this.currentTime<t+l,this.platform.log.debug(`dawnDetected() --  ${e}`)}return e}get duskDetected(){let e=!1;if(this.exampleStates.On){let t=new Date(`${this.api_values.date}T${this.api_values.dusk}.000`).getTime();e=this.currentTime>t-l&&this.currentTime<t+l,this.platform.log.debug(`duskDetected() --  ${e}`)}return e}get apiUrl(){return`https://api.sunrisesunset.io/json?lat=${H}&lng=${I}&timezone=CET&time_format=24`}};var o=v(require("cross-fetch")),p=class{constructor(e,t,r){if(this.platform=e,this.accessory=t,this.config=r,this.Characteristic=this.platform.api.hap.Characteristic,this.accessory.getService(this.platform.Service.AccessoryInformation).setCharacteristic(this.Characteristic.Manufacturer,"Jamie Vangeysel").setCharacteristic(this.Characteristic.Model,"Thermostat").setCharacteristic(this.Characteristic.FirmwareRevision,"1.0").setCharacteristic(this.Characteristic.SerialNumber,"Unknown"),this.service=this.accessory.getService(this.platform.Service.Thermostat)||this.accessory.addService(this.platform.Service.Thermostat),this.service.setCharacteristic(this.Characteristic.Name,r.name),this.service.setCharacteristic(this.Characteristic.ConfiguredName,r.name),this.service.getCharacteristic(this.Characteristic.CurrentHeatingCoolingState).onGet(this.currentHeatingCoolingStateGet.bind(this)),this.service.getCharacteristic(this.Characteristic.TargetHeatingCoolingState).onGet(this.targetHeatingCoolingStateGet.bind(this)).onSet(this.targetHeatingCoolingStateSet.bind(this)),this.service.getCharacteristic(this.Characteristic.CurrentTemperature).onGet(this.currentTemperatureGet.bind(this)),this.service.getCharacteristic(this.Characteristic.TargetTemperature).onGet(this.targetTemperatureGet.bind(this)).onSet(this.targetTemperatureSet.bind(this)).setProps({minValue:16,maxValue:24,minStep:.5}),this.service.getCharacteristic(this.Characteristic.TemperatureDisplayUnits).onGet(this.temperatureDisplayUnitsGet.bind(this)).onSet(this.temperatureDisplayUnitsSet.bind(this)),this.service.getCharacteristic(this.Characteristic.CurrentRelativeHumidity).onGet(this.currentRelativeHumidityGet.bind(this)),r.valves){let i=r.valves.find(c=>c.id==="heating-valve");this.serviceHeatingValve=this.accessory.getService(i.name)||this.accessory.addService(this.platform.Service.Valve,i.name,i.name+"-valve"),this.serviceHeatingValve.setCharacteristic(this.platform.api.hap.Characteristic.Name,i.name).setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,i.name),this.serviceHeatingValve.getCharacteristic(this.platform.api.hap.Characteristic.Active).onGet(this.heatingValveActiveGet.bind(this)).onSet(c=>{this.platform.log.debug("Triggered SET Active:",c)}),this.serviceHeatingValve.getCharacteristic(this.Characteristic.InUse).onGet(()=>this.Characteristic.InUse.NOT_IN_USE),this.serviceHeatingValve.getCharacteristic(this.Characteristic.ValveType).onGet(()=>this.Characteristic.ValveType.GENERIC_VALVE);let s=r.valves.find(c=>c.id==="water-valve");this.serviceWaterValve=this.accessory.getService(s.name)||this.accessory.addService(this.platform.Service.Valve,s.name,s.name+"-valve"),this.serviceWaterValve.setCharacteristic(this.platform.api.hap.Characteristic.Name,s.name).setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,s.name),this.serviceWaterValve.getCharacteristic(this.platform.api.hap.Characteristic.Active).onGet(this.waterValveActiveGet.bind(this)).onSet(this.waterValveActiveSet.bind(this)),this.serviceWaterValve.getCharacteristic(this.Characteristic.InUse).onGet(()=>this.Characteristic.InUse.NOT_IN_USE),this.serviceWaterValve.getCharacteristic(this.Characteristic.ValveType).onGet(()=>this.Characteristic.ValveType.GENERIC_VALVE)}if(r.outlets){let i=r.outlets.find(s=>s.id==="heating-element");this.serviceHeatingOutlet=this.accessory.getService(i.name)||this.accessory.addService(this.platform.Service.Outlet,i.name,i.name+"-outlet"),this.serviceHeatingOutlet.setCharacteristic(this.platform.api.hap.Characteristic.Name,i.name).setCharacteristic(this.platform.api.hap.Characteristic.ConfiguredName,i.name),this.serviceHeatingOutlet.getCharacteristic(this.platform.api.hap.Characteristic.On).onGet(this.heatingOutletOnGet.bind(this)).onSet(s=>{this.platform.log.debug("Triggered SET On:",s)})}}async currentHeatingCoolingStateGet(){this.platform.log.debug("Triggered GET CurrentHeatingCoolingState");let e=null;try{e=(await(await(0,o.default)(this.urls.currentState())).json()).value}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.currentState()}'.`),e=new Error("Error while getting data from thermostat")}return e}async targetHeatingCoolingStateGet(){this.platform.log.debug("Triggered GET TargetHeatingCoolingState");let e=null;try{e=(await(await(0,o.default)(this.urls.targetState())).json()).value}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.targetState()}'.`),e=new Error("Error while getting data from thermostat")}return e}async targetHeatingCoolingStateSet(e){this.platform.log.debug("Triggered SET TargetHeatingCoolingState:",e),await(0,o.default)(this.urls.targetState(),{method:"post",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({value:e})})}async currentTemperatureGet(e){this.platform.log.debug("Triggered GET CurrentTemperature");let t=null;try{t=(await(await(0,o.default)(this.urls.currentTemperature())).json()).value}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.currentTemperature()}'.`),t=new Error("Error while getting data from thermostat")}return t}async targetTemperatureGet(e){this.platform.log.debug("Triggered GET TargetTemperature");let t=null;try{t=(await(await(0,o.default)(this.urls.targetTemperature())).json()).value}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.targetTemperature()}'.`),t=new Error("Error while getting data from thermostat")}return t}async targetTemperatureSet(e){this.platform.log.debug("Triggered SET TargetTemperature:",e),await(0,o.default)(this.urls.targetTemperature(),{method:"post",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({value:e})})}temperatureDisplayUnitsGet(){return this.platform.log.debug("Triggered GET TemperatureDisplayUnits"),0}temperatureDisplayUnitsSet(e){this.platform.log.debug("Triggered SET TemperatureDisplayUnits:",e)}async currentRelativeHumidityGet(){this.platform.log.debug("Triggered GET RelativeHumidity");let e=null;try{e=(await(await(0,o.default)(this.urls.currentRelativeHumidity())).json()).value*100}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.currentRelativeHumidity()}'.`),e=new Error("Error while getting data from thermostat")}return e}async heatingValveActiveGet(){this.platform.log.debug("Triggered GET RelativeHumidity");let e=null;try{e=(await(await(0,o.default)(this.urls.heatingValveActive())).json()).value}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.heatingValveActive()}'.`),e=new Error("Error while getting data from thermostat")}return e}async waterValveActiveGet(){this.platform.log.debug("Triggered GET WaterValve Active");let e=null;try{e=(await(await(0,o.default)(this.urls.waterValveActive())).json()).value}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.waterValveActive()}'.`),e=new Error("Error while getting data from thermostat")}return e}async waterValveActiveSet(e){this.platform.log.debug("Triggered SET WaterValve Active:",e),await(0,o.default)(this.urls.waterValveActive(),{method:"post",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({value:e})})}async heatingOutletOnGet(){this.platform.log.debug("Triggered GET HeatingOutlet On");let e=null;try{e=(await(await(0,o.default)(this.urls.heatingElementOn())).json()).value}catch{this.platform.log.error(`Error while retrieving data from '${this.urls.heatingElementOn()}'.`),e=new Error("Error while getting data from thermostat")}return e}get urls(){let e=`http://${this.config.host}:${this.config.port??8080}/${this.config.instance??"default"}`;return{currentTemperature:()=>`${e}/current-temperature`,targetTemperature:()=>`${e}/target-temperature`,currentRelativeHumidity:()=>`${e}/current-relative-humidity`,currentState:()=>`${e}/current-state`,targetState:()=>`${e}/target-state`,heatingValveActive:()=>`${e}/heating-valve/active`,waterValveActive:()=>`${e}/water-valve/active`,heatingElementOn:()=>`${e}/heating-element/on`}}};var f=class{constructor(e,t,r){this.log=e,this.config=t,this.api=r,this.Service=this.api.hap.Service,this.Characteristic=this.api.hap.Characteristic,this.accessories=[],this.foundAccessoires=[],this.log.debug("Finished initializing platform:",this.config.name),this.api.on("didFinishLaunching",()=>{this.log.debug("Executed didFinishLaunching callback"),this.discoverDevices()})}configureAccessory(e){this.log.info("Loading accessory from cache:",e.displayName),this.accessories.push(e)}discoverDevices(){let e=this.config;e.neoSensors.forEach(this.setupNeoSensor.bind(this)),e.thermostats.forEach(this.setupThermostat.bind(this)),this.setupNeoSunriseSunset();for(let t of this.accessories)this.foundAccessoires.some(function(i){return i===t.UUID})||(this.log.warn(`Accessory '${t.displayName}' war removed due to missing link in config!`),this.api.unregisterPlatformAccessories(h,n,[t]))}setupNeoSensor(e){let t=this.api.hap.uuid.generate(e.uuid);this.foundAccessoires.push(t);let r=s=>s.UUID===t,i=this.accessories.find(r);if(i)if(e){this.log.info("Restoring existing accessory from cache:",i.displayName);let s=new u(this,i,e)}else e||(this.api.unregisterPlatformAccessories(h,n,[i]),this.log.info("Removing existing accessory from cache:",i.displayName));else{this.log.info("Adding new accessory:",e.name);let s=new this.api.platformAccessory(e.name,t);s.context.device=e;let c=new u(this,s,e);this.api.registerPlatformAccessories(h,n,[s])}}setupThermostat(e){let t=this.api.hap.uuid.generate(`${e.host}-${e.instance??"default"}`);this.foundAccessoires.push(t);let r=s=>s.UUID===t,i=this.accessories.find(r);if(i)if(e){this.log.info("Restoring existing accessory from cache:",i.displayName);let s=new p(this,i,e)}else e||(this.api.unregisterPlatformAccessories(h,n,[i]),this.log.info("Removing existing accessory from cache:",i.displayName));else{this.log.info("Adding new accessory:",e.name);let s=new this.api.platformAccessory(e.name,t);s.context.device=e;let c=new p(this,s,e);this.api.registerPlatformAccessories(h,n,[s])}}setupNeoSunriseSunset(){let e=this.api.hap.uuid.generate("SunriseSunset");this.foundAccessoires.push(e);let t=i=>i.UUID===e,r=this.accessories.find(t);if(r){this.log.info("Restoring existing accessory from cache:",r.displayName);let i=new m(this,r)}else{let i=new this.api.platformAccessory("SunriseSunset",e),s=new m(this,i);this.api.registerPlatformAccessories(h,n,[i])}}};var P=a=>{a.registerPlatform(n,f)};
